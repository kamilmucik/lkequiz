// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pkg/pb/question.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuestionService_FindAllQuestions_FullMethodName    = "/question.QuestionService/FindAllQuestions"
	QuestionService_FindPaggedQuestions_FullMethodName = "/question.QuestionService/FindPaggedQuestions"
)

// QuestionServiceClient is the client API for QuestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionServiceClient interface {
	FindAllQuestions(ctx context.Context, in *FindAllQuestionsRequest, opts ...grpc.CallOption) (*FindAllQuestionsResponse, error)
	FindPaggedQuestions(ctx context.Context, in *FindPaggedQuestionsRequest, opts ...grpc.CallOption) (*FindPaggedQuestionsResponse, error)
}

type questionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionServiceClient(cc grpc.ClientConnInterface) QuestionServiceClient {
	return &questionServiceClient{cc}
}

func (c *questionServiceClient) FindAllQuestions(ctx context.Context, in *FindAllQuestionsRequest, opts ...grpc.CallOption) (*FindAllQuestionsResponse, error) {
	out := new(FindAllQuestionsResponse)
	err := c.cc.Invoke(ctx, QuestionService_FindAllQuestions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) FindPaggedQuestions(ctx context.Context, in *FindPaggedQuestionsRequest, opts ...grpc.CallOption) (*FindPaggedQuestionsResponse, error) {
	out := new(FindPaggedQuestionsResponse)
	err := c.cc.Invoke(ctx, QuestionService_FindPaggedQuestions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionServiceServer is the server API for QuestionService service.
// All implementations should embed UnimplementedQuestionServiceServer
// for forward compatibility
type QuestionServiceServer interface {
	FindAllQuestions(context.Context, *FindAllQuestionsRequest) (*FindAllQuestionsResponse, error)
	FindPaggedQuestions(context.Context, *FindPaggedQuestionsRequest) (*FindPaggedQuestionsResponse, error)
}

// UnimplementedQuestionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedQuestionServiceServer struct {
}

func (UnimplementedQuestionServiceServer) FindAllQuestions(context.Context, *FindAllQuestionsRequest) (*FindAllQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllQuestions not implemented")
}
func (UnimplementedQuestionServiceServer) FindPaggedQuestions(context.Context, *FindPaggedQuestionsRequest) (*FindPaggedQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPaggedQuestions not implemented")
}

// UnsafeQuestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionServiceServer will
// result in compilation errors.
type UnsafeQuestionServiceServer interface {
	mustEmbedUnimplementedQuestionServiceServer()
}

func RegisterQuestionServiceServer(s grpc.ServiceRegistrar, srv QuestionServiceServer) {
	s.RegisterService(&QuestionService_ServiceDesc, srv)
}

func _QuestionService_FindAllQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).FindAllQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_FindAllQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).FindAllQuestions(ctx, req.(*FindAllQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_FindPaggedQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPaggedQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).FindPaggedQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_FindPaggedQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).FindPaggedQuestions(ctx, req.(*FindPaggedQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionService_ServiceDesc is the grpc.ServiceDesc for QuestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "question.QuestionService",
	HandlerType: (*QuestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllQuestions",
			Handler:    _QuestionService_FindAllQuestions_Handler,
		},
		{
			MethodName: "FindPaggedQuestions",
			Handler:    _QuestionService_FindPaggedQuestions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/question.proto",
}
